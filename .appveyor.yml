os: Visual Studio 2017

branches:
  only:
    - master

skip_non_tags: true

environment:
  release_version: $(APPVEYOR_REPO_TAG_NAME)
  codecov_upload_token:
    secure: A6EfLnTXlaU17jh59qdcU9dQ7Svr9VVtS7If+Q4WdDh78msCxrf0hWELPY/7W/sz

configuration: Release

init:
- ps: |
      Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"

install:
- ps: |
      Write-Host "STARTED installing tools" -ForegroundColor Magenta

      choco install opencover.portable

      choco install codecov

      Write-Host "FINISHED installing tools" -ForegroundColor Magenta

      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

dotnet_csproj:
  patch: true
  file: 'src\$(APPVEYOR_PROJECT_NAME)\$(APPVEYOR_PROJECT_NAME).csproj'
  version: '$(RELEASE_VERSION)'

before_build:
- ps: |
      Write-Host "STARTED restoring project dependencies" -ForegroundColor Magenta

      dotnet restore -v m

      Write-Host "FINISHED restoring project dependencies" -ForegroundColor Magenta

      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

build_script:
- ps: |
      Write-Host "STARTED building project" -ForegroundColor Magenta

      dotnet build -c $env:CONFIGURATION --no-restore -v m

      Write-Host "FINISHED building project" -ForegroundColor Magenta

      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

after_build:
- ps: |
      Write-Host "STARTED verifying strong name" -ForegroundColor Magenta

      $sn = "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.7 Tools\sn.exe"

      foreach ($assembly in ls "src\$env:APPVEYOR_PROJECT_NAME\bin\$env:CONFIGURATION\*\$env:APPVEYOR_PROJECT_NAME.dll") {
          &$sn -vf $assembly

          if ($LastExitCode -ne 0) { Break }
      }

      Write-Host "FINISHED verifying strong name" -ForegroundColor Magenta

      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

- ps: |
      Write-Host "STARTED creating NuGet package" -ForegroundColor Magenta

      dotnet pack src\$env:APPVEYOR_PROJECT_NAME -c $env:CONFIGURATION --no-restore --no-build --include-symbols --output ..\..\artifacts -v m

      Write-Host "FINISHED creating NuGet package" -ForegroundColor Magenta

      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

test_script:
- ps: |
      Write-Host "STARTED running unit tests" -ForegroundColor Magenta

      dotnet test test\$env:APPVEYOR_PROJECT_NAME.Tests -c $env:CONFIGURATION --no-build -v m

      Write-Host "FINISHED running unit tests" -ForegroundColor Magenta

      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

after_test:
- ps: |
      Write-Host "STARTED generating code coverage report" -ForegroundColor Magenta

      dotnet build -c $env:CONFIGURATION -v m /p:codecov=true

      OpenCover.Console.exe -target:"$env:XUNIT20\xunit.console.x86.exe" -targetargs:"test\$env:APPVEYOR_PROJECT_NAME.Tests\bin\$env:CONFIGURATION\net471\$env:APPVEYOR_PROJECT_NAME.Tests.dll -noshadow" -register:user -filter:"+[*]* -[$env:APPVEYOR_PROJECT_NAME.Tests]*" -hideskipped:All -output:".\coverage.xml"

      Write-Host "FINISHED generating code coverage report" -ForegroundColor Magenta

      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

- ps: |
      Write-Host "STARTED uploading code coverage report" -ForegroundColor Magenta

      codecov -f coverage.xml -t $env:CODECOV_UPLOAD_TOKEN

      Write-Host "FINISHED uploading code coverage report" -ForegroundColor Magenta

      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

artifacts:
  - path: artifacts\$(APPVEYOR_PROJECT_NAME).$(RELEASE_VERSION).nupkg
  - path: artifacts\$(APPVEYOR_PROJECT_NAME).$(RELEASE_VERSION).symbols.nupkg
